{"meta":{"title":"zhylee's Blog","subtitle":"本该狂妄的年纪，怎能如此消极？","description":null,"author":"zhylee","url":"http://blog.zhiyuanep.net"},"pages":[{"title":"","date":"2017-06-30T14:26:37.725Z","updated":"2017-04-17T10:59:20.046Z","comments":true,"path":"404.html","permalink":"http://blog.zhiyuanep.net/404.html","excerpt":"","text":""},{"title":"categories","date":"2017-04-17T10:54:24.000Z","updated":"2017-04-17T10:54:52.009Z","comments":false,"path":"categories/index.html","permalink":"http://blog.zhiyuanep.net/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-04-17T10:49:14.000Z","updated":"2017-04-17T10:52:36.045Z","comments":false,"path":"tags/index.html","permalink":"http://blog.zhiyuanep.net/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HTML5全局属性","slug":"HTML5全局属性","date":"2017-07-02T15:11:30.000Z","updated":"2017-07-02T15:11:30.567Z","comments":true,"path":"2017/07/02/HTML5全局属性/","link":"","permalink":"http://blog.zhiyuanep.net/2017/07/02/HTML5全局属性/","excerpt":"","text":"全局属性是所有 HTML 元素共有的属性；它们可以用于所有元素，尽管属性可能对某些元素没有影响。 accesskey这个属性提供了一种使用快捷键访问当前元素的途径。它是用一个字符（单个 Unicode code）列表的独立规范构成。浏览器应使用键盘的第一布局。 classclass 属性允许 css 和 JavaScript 通过 class 选择器或者类似以下的 DOM 方法来选择和访问 Element： document.getElementsByClassName() 使用说明：尽管规范没有将 class 的名字定为必须的，但是开发者会使用一个能描述 element 语义化用途的名字，而不会使用一个描述他外观的名字。语义化的名字仍然有意义即使页面的表现形式改变了。 contenteditable这个可枚举的属性表示该 element 可以被用户编辑。如果是这样，浏览器会修改 widget 让它允许编辑。其值为 true 或 false。 如果这个属性没有被设置，它的默认值会继承其父 element 的值。 使用说明：该属性是一个可枚举的属性，而不是一个布尔属性。这意味着 true、false或空字符串的显式使用是强制的。这样的简写 &lt;label contenteditable&gt;Example Label&lt;/label&gt; 是不允许的。正确的使用方式是：&lt;label contenteditable=&quot;true&quot;&gt;Example Label&lt;/label&gt;. contextmenu一个 context menu 是一个菜单，出现在用户的交互里，比如一次右击。 HTML5 允许我们自定义这个菜单。 data-*这类属性被称为自定义属性，允许 HTML 与和它对应 DOM 表现形式之间的专有信息交换，这或许对 script 来说有用。HTMLElement.dataset 属性提供了访问它们的权限。 命名规则： 不能以 xml 开头，除此之外其它斜体情形都可以使用这三个字母； 名字不能含有分号； 名字不能含有大写字母。 注意：HTMLElement.dataset是一个 StringMap，一个名叫 data-test-value的自定义属性可以通过 HTMLElement.dataset.testValue 来访问。属性的名字中的中线被挨着它字母的大写字母代替了（驼峰命名）。 dir这个可枚举属性表明 element 的文本方向，可以取以下的值： ltr，适用于从左到右的语言； rtl，适用于从右到左的语言； auto，由代理决定。用一个最基础的算法来解析 element 中的字符，如果发现有一个字符具有强的方向性，那么就把这个方向作为整个 element 的方向。 使用说明： 这个属性在 &lt;bdo&gt; 元素中强制要求使用，它在里边有不同的语法含义。 &lt;bdi&gt; 元素不继承父元素的该属性。如果不设置，它的值就是 auto。 这个属性能够被 css 属性 direction 和 unicode-bidi 覆盖。 因为文本的方向与内容本身有关，和它的表现没关系，所以推荐开发者尽可能使用这个属性来避免在 css 属性中使用。这样的话，即使浏览器不支持 css 或者 css 被解除，它还是会正确显示。 auto值应该用到不明方向的数据中，就像用户输入的数据，它最终会保存到数据中去。 draggable这个可枚举的属性决定一个 element 是否能够被拖动，可使用以下的值： true，表示该 element 可以被拖动。 false，表示该 element 不可以被拖动。 auto，默认值，表示它的行为由浏览器定义。 使用说明： 该属性是一个可枚举属性，不是布尔属性，其值不能够被简写。 默认情况下，只有被选中的文本、图像、链接能够被拖动。对于其它 element 而言，为也让拖拽机制能够正常工作，ondragstart 必须被设置。 dropzone（未实现）这个可枚举属性决定丢到一个 element 上的内容类型，可使用的值如下： copy，表示丢放时会创建一个被拖拽 element 的副本； move，表示被拖拽的 element 被移动到这个新位置； link，将会给拖拽的数据创建一个链接。 hidden这个布尔属性表示 element 被隐藏，浏览器不会渲染该元素。 id这个属性是 element 唯一的标识，它在整个 document 里应该是唯一的。当需要链接、执行脚本、控制样式时，可以用它来定位识别元素。 lang这个属性用于定义 element 的语言。不管这个 element 能不能被编辑，都应该写上这个属性。 如果属性的内容是空字符串，那么语言就会被设置为 unknown；如果标签的内容是无效的，它就会被设置为 invalid。 spellcheck这个可枚举属性定义 element 是否检查拼写错误。它的值可以是以下： true,表示如果可能的话， element 应该被检查拼写错误； false，表示 element不应该检查拼写错误。× 默认值可能是浏览器定义的，也可能由父元素决定。 使用说明： 这个属性是可枚举的，不是一个布尔属性，值不可以简写； 对于浏览器来说，这个属性只是一个提示，浏览器不一定会去检查拼写错误。通常不可编辑的 element 是不检查拼写错误的。 style这个属性包含 css 样式声明，被应用到元素上。注意推荐将它定义在其它文件里。这个属性和 &lt;style&gt; 元素一样，主要的目的是快速编写样式，用来测试想要的效果。 tabindex这个整数类型的属性决定 element 是否要以获得焦点，如果它参与到排序的键盘导航，就可以定位它。它可能需要以下几种值： 负数意味着该 element 不可以获得焦点，也不可以通过排序的键盘导航到达； 0 意味着 element 可以通过排序的键盘导航到达，但是相对顺序取决于平台惯例； 一个正数意味着可以通过排序的键盘导航获得焦点并到达。相对顺序去决议该属性的值，按照 tabindex 的增值排序。如果几个 element 有相同的 tabindex,他们的相对顺序取决于他们在 document 中的位置。 在排序的键盘导航单上，如果一个元素的 tabindex 的值是一个0或者无效值或没有该属性，那么它应该被放在值是正数的element 后边。 title这个属性包含的是文本信息，该信息代表 element 自己包含的内容的公告。这样的信息不是必要的，但是作为一个提示用户的工具，一般会有以下几个用法： 链接：关于被链接文档的一个标题或一段描述； 和图片类似的媒体元素：一段描述或相关的可信度； 段落：脚注活评论； 引用：关于作者等一些信息。 如果这个属性不存在或被清除了，则意味着离它最近的祖先元素的 title 和它相关（能够相应地成为这个元素的提示工具）。如果这个属性是空字符串，则表示离它最近的父元素的 title 和它没关系（不能作为这个元素的提示工具）。 &lt;link&gt;、&lt;abbr&gt;和 &lt;input&gt;的 title 属性可以包含额外的语义信息。 title 可能包含多行信息，通过插入换行符。 translate这是一个可枚举属性，用于确定当页面进行本地化时，元素的属性以及元素的文本子节点中的内容是否要进行翻译。其可取的值如下 ： 空字符串或者 yes，表示这个元素相关的内容将会被翻译； no，表示这个元素相关的内容不会被翻译。","categories":[{"name":"HTML5","slug":"HTML5","permalink":"http://blog.zhiyuanep.net/categories/HTML5/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"http://blog.zhiyuanep.net/tags/HTML5/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-07-01T03:07:15.941Z","updated":"2017-03-27T10:00:59.734Z","comments":true,"path":"2017/07/01/hello-world/","link":"","permalink":"http://blog.zhiyuanep.net/2017/07/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Git 常用命令快速预览","slug":"Git-常用命令快速预览","date":"2017-06-30T12:02:11.000Z","updated":"2017-07-01T04:37:03.939Z","comments":true,"path":"2017/06/30/Git-常用命令快速预览/","link":"","permalink":"http://blog.zhiyuanep.net/2017/06/30/Git-常用命令快速预览/","excerpt":"","text":"本文摘录自 https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf 。 配置工具为所有本地仓库配置用户信息。 $ git config --global user.name &quot;[name]&quot; 设置提交时的用户名称。 $ git config --global user.email &quot;[email address]&quot; 设置提交时的邮箱地址。 $ git config --global color.ui auto 为 Git 命令行输出开启颜色强调。 创建代码仓库新建或者从指定 URL 导入仓库。 $ git init [project-name] 新建指定名称的本地仓库。 $ git clone [url] 从指定 URL 导入代码仓库，包含该仓库的所有版本信息。 提交修改预览并提交修改。 $ git status 列出工作区所有新建或被修改的文件。 $ git diff 列出工作区中所有未被暂存的修改。 $ git add [file] 将指定文件的当前版本加入暂存区，准备被提交。 git diff --staged 比较暂存区的文件与仓库最新版本的差异。 git reset [file] 将指定文件从暂存区移除，但保留在工作区被修改的内容。 git commit -m &quot;[descriptive message]&quot; 将文件快照永久保存到仓库。 分支 git branch 列出当前仓库的所有分支。 git branch [branch-name] 创建新的分支。 git checkout [branch-name] 切换到指定分支，并更新工作目录。 git merge [branch] 将指定分支的提交历史合并到当前分支。 git branch -d [branch-name] 删除指定分支。 重构文件名移动或删除已经被版本追踪的文件。 git rm [file] 将指定文件从工作区删除，并将该修改提交到暂存区。 git rm --cached [file] 将指定文件从版本控制中移除，保留工作区的副本。 git mv [src] [dest] 更改文件名，并提交到暂存区。","categories":[{"name":"Git","slug":"Git","permalink":"http://blog.zhiyuanep.net/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://blog.zhiyuanep.net/tags/Git/"}]},{"title":"Git学习笔记","slug":"Git学习笔记","date":"2017-04-19T14:57:26.000Z","updated":"2017-04-20T13:22:13.538Z","comments":true,"path":"2017/04/19/Git学习笔记/","link":"","permalink":"http://blog.zhiyuanep.net/2017/04/19/Git学习笔记/","excerpt":"","text":"摘录于《Git Pro》。原文地址:https://git-scm.com/book/zh/v2/ 背景知识关于版本控制什么是“版本控制”？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 版本控制系统(VCS)的演进本地版本控制系统 -&gt; 集中化的版本控制系统 -&gt; 分布式版本控制系统。 本地版本控制系统大多数都是采用某种简单的数据库来记录文件的历次更新的差异。其中最流行的是RCS，它的工作原理是在硬盘上保存补丁集（文件修订前后的变化）；通过应用所有补丁，可以重新计算出各个版本的文件内容。 集中化的版本控制系统(CVCS)是为了让不同系统上的开发者协同工作而生。些类系统包括 CVS、Subversion(SVN) 以及 Perforce 等。都有一个单一的集中管理的服务器，保存所有文件的修订版本。客户端需要连接到该服务器才能取出最新的文件或者提交更新。 相比于本地 VCS 来说，可以在一定程度上看到项目中其它人的工作成果。而管理员也可以轻松掌控每个开发者的权限。其显而易见的缺点是中央服务器的单点故障。如果服务器宕机，所有人都无法更新和提交。如果服务器磁盘发生损坏，则会丢失项目整个变更历史，只剩下每个人各自机器上保留的单独快照。本地 VCS 也存在该问题。此外，客户端必须与服务器联网才能更新和提交。 分布式版本控制系统分布式版本控制系统 (DVCS) 是为了解决上述问题而生。这类系统包括 Git、Mercurial、Bazaar 以及 Darcs 等。客户端不再只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来。任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。 Git 的思想和基本工作原理注意与 Subversion 等其它版本管理系统的区别。 直接记录快照，而非差异比较Git 的这种对待数据的方法是与其它版本控制系统（包括 Subversion 和近似工具）的主要差别。 其它大部分系统以文件变更列表的方式存储信息，它们将保存的信息看作是一组基本文件和每个文件随着时间逐步累积的差异。 Git 将数据看作是对小型文件系统的一组快照。每次提交更新或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git 对待数据更像是一个 快照流。 近乎所有操作都是本地执行Git 中绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。比如你要浏览项目的历史，因为你的本地磁盘保存的是完整的代码库，你可以随时随地查看项目历史而无需与服务器联网，这一点在以往的集中式版本控制系统无法做到。如果你需要提交修改，在不联网的情况下，Git 允许你先提交到本地仓库，待联网后再推送到远程仓库。而而集中式版本控制系统（比如 Subversion）必须与服务器处于联网状态才能够提交修改。 Git 保证完整性Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。 Git 一般只添加数据你执行的 Git 操作，几乎都是只往 Git 数据库中增加数据。很难让 Git 执行任何不可逆操作。或者让它以任何方式清除数据。未提交更新时有可能丢失或弄乱修改的内容，但是一旦提交快照到 Git 中，就很难再丢失数据。 三种状态Git 有三种状态，你的文件可能处于其中之一：已修改（modified）、已暂存（staged）、已提交（committed）。已修改表示修改了文件，但还没保存到数据库中；已暂存表示对一个已修改文件的当前版本作了标记，使之包含在下次提交的快照中；已提交表示数据已经安全保存在本地数据库中。 由三种状态引入 Git 项目的三个工作区域的概念：工作目录、暂存区域、Git 仓库。 工作目录：是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。暂存区域：是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。Git 仓库：是 Git 用来保存项目的元数据和对象数据库的地方。这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 基本的 Git 工作流程 在工作目录中修改文件； 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存到 Git 仓库目录。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态；如果作为修改并已放入暂存区域，就属于已暂存状态；如果 Git 目录中保存着特定版本文件，就属于已提交状态。 初次运行 Git 前的配置Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量配置文件在三个地方： /etc/gitconfig：包含系统上每一个用户及他们仓库的通用配置。如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。 ~/.gitconfig或 ~/.config/git/config文件：只针对当前用户。可以传递 --global 选项让 Git 读写些文件。 当前使用仓库的 Git 目录中的 config 文件（就是.git/config）：针对该仓库。 每个具体级别覆盖上一级别的配置。 用户信息设置用户名称和邮件地址，每一个 Git 的提交都会使用这些信息，并且会写入到每一次提交中，不可更改： $ git config --global user.name &quot;John Doe&quot; $ git config --global user.email &quot;johndoe@example.com&quot; 注意：如果使用了--global选项，那么对于该用户上的所有项目都默认使用这些信息。如果想针对特定项目使用不同的用户名称与邮件地址，可以在该项目目录下运行没有--global选项的命令来配置。 文本编辑器当 Git 需要你输入信息时会调用它。如果未配置，Git 会使用操作系统默认的文本编辑器。如果想使用不同的文本编辑器，可以这样做： $ git config --global core.editor emacs 检查配置信息可以使用 git config --list命令来列出所有 Git 当时能找到的配置。 可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置。这种情况下，Git 会使用它找到的每一个变量的最后一个配置。 可以通过输入git config &lt;key&gt;来检查特定配置项。 $ git config user.name John Doe 获取帮助有三种方法可以找到 Git 命令的使用手册： $ git help &lt;verb&gt; $ git &lt;verb&gt; --help $ man git-&lt;verb&gt; Git 基础获取 Git 仓库有两种方法：第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。 在现有目录中初始化仓库进入现有的项目目录，并输入： $ git init 该命令会创建一个名为 .git 的子目录。该命令仅仅是作了一个初始化的操作，项目里的文件还没有被跟踪。 如果是在一个已经存在文件的文件夹中初始化 Git 仓库来进行版本控制的话，可通过 git add命令来实现对指定文件的跟踪，然后执行git commit提交。例如： $ git add *.c $ git add LICENSE $ git commit -m &apos;initial project version&apos; 克隆现有的仓库可以使用git clone命令。克隆该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要的文件。默认配置下远程 Git 仓库的每一个文件的每一个版本都将被拉取下来。如果服务器的磁盘坏掉了，可以使用任何一个克隆下来的用户端来重建服务器上的仓库。 比如要克隆 Git 的可链接库 libgit2，可以用下面的命令： $ git clone https://github.com/libgit2/libgit2 如果想在克隆远程仓库的时候，自定义本地仓库的名字，可以使用如下命令： $ git clone https://github.com/libgit2/libgit2 mylibgit 这样，本地创建的仓库名字变为 mylibgit。 Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。 记录每次更新到仓库工作目录下的每个文件不外乎两种状态：已跟踪或未跟踪。已跟踪：指那些被纳入版本控制的文件，在上一次快照中有它们的记录。未跟踪：工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件。它们既不存在于上次快照中，也没有放入暂存区。初次克隆某个仓库的时候，工作目录的所有文件都属于已跟踪文件，并处于未修改状态。 编辑过某些文件后，Git 将它们标记为已修改文件。再将这些修改过的文件入入暂存区，然后提交所有暂存了的修改，如此反复。 检查当前文件状态要查看哪些文件处于什么状态，可以用 git status命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出： $ git status On branch master nothing to commit, working directory clean 说明现在的工作目录相当干净，所有已跟踪文件在上次提交后都未被更改过。 在项目下创建一个新的 README 文件，如果之前不存在这个文件，使用git status命令，你将看到一个新的未跟踪文件： $ echo &apos;My Project&apos; &gt; README $ git status On branch master Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) README nothing added to commit but untracked files present (use &quot;git add&quot; to track) 在状态报告中可以看到新建的 README 文件出现在 Untracked files下面。未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些该文，Git 不会自动将之纳入跟踪范围。除非你明明白白告诉它“我需要跟踪该文件”。 跟踪新文件使用命令 git add开始跟踪文件。要跟踪 README 文件，运行： $ git add README 再运行git status命令，会看到 README 文件已经被跟踪，并处于暂存状态： $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README 只要在Changes to be committed这行下面的，就说明是已暂存状态。git add命令使用文件或目录的路径作为参数，如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。 暂存已修改文件如果你修改了一个名为 CONTRIBUTING.md的已被跟踪的文件，再运行git status命令，会看到下面内容： $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: CONTRIBUTING.md 可以看到CONTRIBUTING.md文件已经被修改，且并未放到暂存区。要暂存这次更新，需要运行 git add命令。这是个多功能命令：可以用它开始跟踪新文件，或者把被修改的已跟踪文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将git add命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”更加合适。 暂存CONTRIBUTING.md之后再看看git status的输出： $ git add CONTRIBUTING.md $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README modified: CONTRIBUTING.md、 如果你想再修改CONTRIBUTING.md文件，比如加一条注释，重新编辑存盘后，准备好提交。不过且慢，再运行git status看看： $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README modified: CONTRIBUTING.md Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: CONTRIBUTING.md 可以看到CONTRIBUTING.md同时出现在暂存区和非暂存区。这是因为 Git 只不过暂存了你运行git add命令时的版本，如果你现在提交，CONTRIBUTING.md的版本是你最后一次运行git add命令时的那个版本，而不是你运行git commit时，在工作目录的当前版本。所以，运行了git add之后又作为修订的文件，需要重新运行git add把最新版本重新暂存起来： $ git add CONTRIBUTING.md $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README modified: CONTRIBUTING.md 状态简览git status命令输出十分详细，可以使用 git status -s，你将得到一种更为紧凑的格式输出： $ git status -s M README MM Rakefile A lib/git.rb M lib/simplegit.rb ?? LICENSE.txt 新添加的末跟踪文件前面有??标记，新添加到暂存区中的文件前面有A标记，修改过的文件前面有M标记。M有两个可以出现的位置，出现在右边的M表示该文件被修改了但是还没放入区，出现在靠左边的M表示该文件被修改了并放入了暂存区。Rakefile 前面有两个位置都出现了M，表示该文件修改了提交暂存区后又再次被修改。 忽略文件一些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件，无需纳入 Git 的管理，也不希望它们总出现在末跟踪文件列表。可以创建一个名为.gitignore的文件，列出要忽略的文件模式，例如： $ cat .gitignore *.[oa] *~ 表示告诉 Git 忽略所有以 .o 或 .a结尾的文件，以用以波浪符(~)结尾的文件。 文件.gitignore的格式规范如下： 所有空行或者以#开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（*） 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。 查看已暂存和未暂存的修改使用git diff命令，将通过文件补丁的格式显示具体哪些行发生了改变。 要查看尚未暂存的文件更新了哪些部分，不加参数直接输入git diff： $ git diff diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 8ebb991..643e24f 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you&apos;re contributing in the first place, you&apos;re less likely to get feedback and have your change -merged in. +merged in. Also, split your changes into comprehensive chunks if your patch is +longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it&apos;s 此命令比较的是工作目录中当前文件和暂存区快照之间的差异，也就是修改之后不穿堂风有暂存起来的变化内容。 要查看已暂存的将要添加到下次提交里的内容，可以用git diff --cached或git diff --staged命令。 $ git diff --cached diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 8ebb991..643e24f 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you&apos;re contributing in the first place, you&apos;re less likely to get feedback and have your change -merged in. +merged in. Also, split your changes into comprehensive chunks if your patch is +longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it&apos;s 提交更新在提交更新之前，请务必先用git status看下，是不是所有新建或修改过的文件都已经暂存起来了，然后再运行提交命令git commit： $ git commit 这种方式会启动文本编辑器以便输入本次提交的说明 。默认的提交消息包含最后一次运行git status的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。如果想要更详细的对修改了哪些内容的提示，可以用-v选项，这会将你所做的改变的diff输出放到编辑器中。退出编辑器时，Git 会丢掉注释行，用你输入提交附带信息生成一次提交。 可以在git commit命令后添加-m选项，将提交信息与命令放在同一行，如下所示： $ git commit -m &quot;Story 182: Fix benchmarks for speed&quot; [master 463dc4f] Story 182: Fix benchmarks for speed 2 files changed, 2 insertions(+) create mode 100644 README 提交结果会告诉你，当前是哪个分支提交的，本次提交的完整SHA-1校验和是什么，以及在本次提交中有多少文件修订过，多少行添加和删改过。 每次提交都是对项目作一次快照，以后可以回到这个状态，或者进行比较。 跳过使用暂存区域Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给git commit加上-a选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过git add步骤。 移除文件要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除。可以用git rm命令完成些项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在末跟踪文件清单中了。 如果只是简单地从工作目录中手工删除文件，运行git status时就会在未暂存清单看到： $ rm PROJECTS.md $ git status On branch master Your branch is up-to-date with &apos;origin/master&apos;. Changes not staged for commit: (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) deleted: PROJECTS.md no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) 然后再运行git rm记录此次移除文件的操作： $ git rm PROJECTS.md rm &apos;PROJECTS.md&apos; $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) deleted: PROJECTS.md 下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项-f。这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。 另外一种情况是，我们想把文件从 Git 仓库中删除（变即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。为达到这一目的，使用--cached选项。例如： $ git rm --cached README git rm命令后面可以列出文件或者目录的名字，也可以使用glob模式，比方说： $ git rm log/\\*.log 注意到星号*之前的反斜杠\\，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。此命令删除log/目录下扩展名为.log的所有文件。 移动文件Git 并不显式跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 要在 Git 中对文件改名，可以这么做： $ git mv file_from file_to 查看状态信息，也是明白无误地看到关于重命名操作的说明： $ git mv README.md README $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) renamed: README.md -&gt; README 其实，运行git mv就相当于运行了下面三条命令： $ mv README.md README $ git rm README.md $ git add README 如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。两者唯一的区别是，mv是一条命令，而另一种方式需要三条命令，直接用git mv轻便得多。 查看提交历史要回顾提交历史，可以使用git log命令，默认不用任何参数的话，类似以下输出： $ git log commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Sat Mar 15 10:31:28 2008 -0700 first commit git log会按提交时间列出所有的更新，最近的更新排在最上面，并列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。 显示每交提交内容差异一个常用的选项是-p，用来显示每次提交的内容差异。你也可以加上-2来仅显示最近两次提交： $ git log -p -2 commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number diff --git a/Rakefile b/Rakefile index a874b73..8f94139 100644 --- a/Rakefile +++ b/Rakefile @@ -5,7 +5,7 @@ require &apos;rake/gempackagetask&apos; spec = Gem::Specification.new do |s| s.platform = Gem::Platform::RUBY s.name = &quot;simplegit&quot; - s.version = &quot;0.1.0&quot; + s.version = &quot;0.1.1&quot; s.author = &quot;Scott Chacon&quot; s.email = &quot;schacon@gee-mail.com&quot; s.summary = &quot;A simple gem for using Git in Ruby code.&quot; commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test diff --git a/lib/simplegit.rb b/lib/simplegit.rb index a0a60ae..47c6340 100644 --- a/lib/simplegit.rb +++ b/lib/simplegit.rb @@ -18,8 +18,3 @@ class SimpleGit end end - -if $0 == __FILE__ - git = SimpleGit.new - puts git.show -end \\ No newline at end of file 当进行代码审查，或者快速浏览某个搭档提交的 commit 所带来的变化的时候，这个参数就非常有用了。 查看提交统计信息可以使用--stat选项查看每次提交的简略的统计信息： $ git log --stat commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number Rakefile | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test lib/simplegit.rb | 5 ----- 1 file changed, 5 deletions(-) commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon &lt;schacon@gee-mail.com&gt; Date: Sat Mar 15 10:31:28 2008 -0700 first commit README | 6 ++++++ Rakefile | 23 +++++++++++++++++++++++ lib/simplegit.rb | 25 +++++++++++++++++++++++++ 3 files changed, 54 insertions(+) --stat选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。在每次提交的最后还有一个总结。 定制输出格式和内容另外一个常用的选项是--pretty。这个选项可以指定使用不同于默认格式的方式展示提交历史。这个选项有一些内建的子选项供你使用。比如用oneline将每个提交放在一行显示，查看的提交数很大时非常有用。另外还有short，full和fuller可以用，展示的信息或多或少有些不同。 $ git log --pretty=oneline ca82a6dff817ec66f44342007202690a93763949 changed the version number 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test a11bef06a3f659402fe7563abf99ad00de2209e6 first commit format可以定制要显示的记录格式。这样的输出对后期提取分析格外有用，因为你知道输出的格式不会随着 Git 的更新而发生改变： $ git log --pretty=format:&quot;%h - %an, %ar : %s&quot; ca82a6d - Scott Chacon, 6 years ago : changed the version number 085bb3b - Scott Chacon, 6 years ago : removed unnecessary test a11bef0 - Scott Chacon, 6 years ago : first commit 下面的表格列出了git log --pretty=format常用的格式点位符写法及其代表的意义。 选项 说明 %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 –date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者（committer）的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明 以下是git log的常用选项。 选项 说明 -p 按补丁格式显示每个更新之间的差异。 –stat 显示每次更新的文件修改统计信息。 –shortstat 只显示 –stat 中最后的行数修改添加移除统计。 –name-only 仅在提交信息后显示已修改的文件清单。 –name-status 显示新增、修改、删除的文件清单。 –abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。 –relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。 –graph 显示 ASCII 图形表示的分支合并历史。 –pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。 限制输出长度git log有许多非常实用的限制输出长度的选项。-&lt;n&gt;表示仅显示最近的 n 条提交，n 可以是任何整数。实践中不太用这个选项，Git 在输出所有提交时会自动调用分页程序，所以你一次只会看到一页的内容。 另外还有按照时间作限制的选项，比如--since和--until。下面的命令列出所有最近两周内的提交 $ git log --since=2.weeks 这个命令可以在多种格式下工作，比如说具体的某一天2008-01-15，或者是相对地多久以前“2 years 1 day 3 minutes ago”。 还可以给出若干搜索条件，列出符合的提交。用--author选项显示指定作者的提交，用--grep选项搜索提交说明中的关键字。（如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match选项。否则，满足任意一个条件的提交都会被匹配出来） 另一个非常有用的筛选选项是-S，可以列出那些添加或移除了某些字符串的提交。比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用： $ git log -Sfunction_name 最后一个很实用的git log选项是路径（path），如果只关心某些文件或者目录的历史提交，可以在git log选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限定的路径名。 以下表格是限制git log输出的选项。 选项 说明 -(n) 仅显示最近的 n 条提交 --since, --after 仅显示指定时间之后的提交。 --until, --before 仅显示指定时间之前的提交。 --author 仅显示指定作者相关的提交。 --committer 仅显示指定提交者相关的提交。 --grep 仅显示含指定关键字的提交 -S 仅显示添加或移除了某个关键字的提交 来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试文件，可以用下面的查询命令： $ git log --pretty=&quot;%h - %s&quot; --author=gitster --since=&quot;2008-10-01&quot; \\ --before=&quot;2008-11-01&quot; --no-merges -- t/ 5610e3b - Fix testcase failure when extended attributes are in use acd3b9e - Enhance hold_lock_file_for_{update,append}() API f563754 - demonstrate breakage of detached checkout with symbolic link HEAD d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths 51a94af - Fix &quot;checkout --track -b newbranch&quot; on detached HEAD b0ad11e - pull: allow &quot;git pull origin $something:$current_branch&quot; into an unborn branch 在近 40000 条提交中，上面的输出仅列出了符合条件的 6 条记录。 撤消操作覆盖上一次提交有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有--amend选项的提交命令尝试重新提交： $ git commit --amend 这个命令会将暂存区的文件提交。如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行些命令），那么快照会保持不变，而你所修改的只是提交信息。新的提交信息会覆盖旧的提交信息。 例如，提交后发现忘记了暂存某些需要的修改，可以像下面这样操作： $ git commit -m &apos;initial commit&apos; $ git add forgotten_file $ git commit --amend 最终你只会有一个提交，第二次提交将代替第一次提交的结果。 取消暂存的文件使用git reset HEAD &lt;file&gt;...可以取消暂存指定的文件。 撤消对文件的修改如果想将已经被修改的文件恢复到上次提交成功的状态，可以使用git checkout -- &lt;file&gt;...命令撤消之前所做的修改。 记住，在 Git 中任何已提交的东西几乎总是可以恢复的。甚至那些被删除的分支中的提交或使用--amend选项覆盖的提交也可以恢复。然而，任何你未提交的东西丢失后很可能再也找不到了。 远程仓库的使用查看远程仓库如果想查看已经配置的远程仓库服务器，可以运行git remote命令，它会列出你指定的每一个远程服务器的简写。如果你已经克隆了自己的仓库，那么至少可以看到 origin –这是Git 给你克隆的仓库服务器的默认名字。 也可以指定选项-v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。","categories":[{"name":"Git","slug":"Git","permalink":"http://blog.zhiyuanep.net/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://blog.zhiyuanep.net/tags/Git/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://blog.zhiyuanep.net/tags/学习笔记/"}]},{"title":"Hexo简易使用手册","slug":"Hexo简易使用手册","date":"2017-04-17T05:14:53.000Z","updated":"2017-04-20T02:50:40.064Z","comments":true,"path":"2017/04/17/Hexo简易使用手册/","link":"","permalink":"http://blog.zhiyuanep.net/2017/04/17/Hexo简易使用手册/","excerpt":"","text":"说明这篇文章只摘取了自己认为重要的信息，方便日后查找。具体请参考 Hexo 官方文档。 开始使用安装安装前提在安装 Hexo 之前，请确保系统已经安装了以下软件： Node.js Git 安装 Hexo$ npm install -g hexo-cli 建站执行以下命令初始化博客项目，其中 &lt;folder&gt; 为博客目录名称。 $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; 文件说明新建完成后，生成的文件目录如下： ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml博客的配置文件，可以配置生成器、插件、站点信息等大部分参数。 scaffolds模板文件夹。新建文章时，Hexo 会根据 scaffolds 来填充新建的 markdown 文件的内容。 source存放用户资源的地方。除了 _posts 文件夹之外，开头命名为 _ 的文件/文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其它文件会被挎贝过去。 themes主题文件夹。Hexo 会根据主题来生成静态页面。 配置可以在 _config.yml 修改大部分配置。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区，Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York，Asia/Shanghai 其中，description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author 参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的永久链接格式 :year/:month:/day/:title/ permalink_defaults 永久链接中各部分的默认值 如果您的网站存在于子目录中，例如 http://yoursite.com/blog，则请将 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 路过指定文件的渲染，您可使用 glob 表达式来匹配路径。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为(1)小写或(2)大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 默认情况下，Hexo 生成的超链接都是绝对地址。而相对链接无论用什么域名访问该站点都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类&amp;标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期/时间Hexo 使用 Moment.js来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量（0=关闭分页功能） 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为 false 时禁用主题 deploy 部署部分的设置 关于 deploy 的详细设置请参考此处。 Hexo 指令init$ hexo new [folder] 新建一个网站。如果 folder 为空，则默认在当前目录建立网站。 new$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有指定 layout，默认使用 _config.yml中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate$ hexo generate 或： $ hexo g 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 publish$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server$ hexo server 或： $ hexo s 启动服务器。默认情况下，访问网址为：http://localhost:4000/。 Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用。 $ npm install hexo-server --save 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy$ hexo deploy 或： $ hexo d 部署网站。 选项 描述 -g, --generate 部署之前预先生成静态文件 rendder$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 选项 描述 -o, --output 设置输出路径 migrate$ hexo migrate &lt;type&gt; 从其它博客系统迁移内容，具体参考此处。 clean$ hexo clean 清除缓存文件（db.json）和已生成的静态文件（public）。 list$ hexo list 列出网站资料。 version$ hexo version 显示 Hexo 版本。 全局选项安全模式$ hexo --safe 安全模式下，不会载入插件和脚本。如果在安装新插件时遭遇问题，可以尝试以安全模式重新执行。 调试模式$ hexo --debug 在终端中显示调试信息并记录到 debug.log。 简洁模式$ hexo --slient 隐藏终端信息。 自定义配置文件的路径$ hexo --config custom.yml 自定义配置文件路径，执行后将不再使用 _config.yml。 显示草稿$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义CWD$ hexo --cwd /path/to/cwd 自定义当前工作目录 (current working directory) 的路径。 基本操作写作通过以下命令创建一篇文章。 $ hexo new [layout] &lt;title&gt; 默认布局为 post。 布局（Layout）Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其它布局和 post 相同，都将会储存到 source/_posts 文件夹。 布局 路径 post source/_posts page source draft source/_drafts 文件名称Hexo 默认以标题作为文件名称。_config.yml 文件的 new_post_name 参数支持以下变量。 变量 描述 :title 标题（小写，空格将会被替换为短杠） :year 建立的年份，比如, 2017 :month 建立的月份（有前导零），比如， 04 :i_month 建立的月份（无前导零），比如，4 :day 建立的日期（有前导零），比如，07 :i_day 建立的日期（无前导零），比如，7 草稿草稿是一种特殊布局，可以通过 publish 命令将草稿移动到 source/_posts 文件夹，也可以在命令中指定 layout 来指定布局。 $ hexo publish [layout] &lt;title&gt; 草稿默认不会显示在页面中，可以在执行时加上--draft参数，或者是把 render_drafts 参数设为 true 来预览草稿。 模板（Scaffold）在新建文章时，Hexo 会根据 scaffolds文件夹内相对应的文件来建立文件，例如： $ hexo new photo &quot;My Gallery&quot; 在执行这行命令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期 Front-matterFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量。以下是预先定义的参数，您可以在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） pwemLINK 覆盖文章网址 如果希望文章不可见，可以将 layout 变量设置为 false。 分类和标签只有文章支持分类和标签，你可以在 Front-matter 中设置。在 Hexo 中分类和标签有着明显的差别：分类具有顺序性和层次性，而标签则相反。另外，Hexo 不支持多个同级的分类。例如： categories: - Tools - Git tags: - Git - Github - CVS 以上设置中，会使 Git 分类成为 Tools 的子分类，而不是并列分类。 JSON Front-matter除了 YAML 之外，也可以使用 JSON 来编写 Front-matter，只要将 --- 替换为 ;;; 即可。 标签插件标签插件和 Front-matter 中的标签不同，这综合症是用于在文章中快速插入特定内容的插件。 引用块在文章中插入引言，可包含作者，来源和标题。 {% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %} 例如，引用书上的句子： Do not just seek happiness for yourself. Seek happiness for all. Through mercy. David LevithanWide Awake 代码块在文章中插入代码。 {% codeblock [title] [lang:language] [url] [link text] %} code snippet {% endcodeblock %} 反引号代码块另一种形式的代码块，不同的是它使用三个反引号来包裹。 ``` [language] [title] [url] [link text] code snippet ``` Pull Quote在文章中插入 Pull Quote。 {% pullquote [class] %} content {% endpullquote %} jsFiddle在文章中嵌入 jsFiddle。 {% jsfiddle shorttag [tabs] [skin] [width] [height] %} Gist在文章中嵌入 Gist。 {% gist gist_id [filename] %} iframe在文章中插入 iframe。 ｛% iframe url [width] [height] %｝ image在文章中插入指定大小的图片。 {% img [class names] /path/to/image [width] [height] [title text [alt text]] %} Link在文章中插入链接，并自动给外部链接添加 target=&quot;_blank&quot; 属性。 {% link text url [external] [title] %} Include Code插入 source 文件夹内的代码文件。 {% include_code [title] [lang:language] path/to/file %} Youtube在文章中插入 Youtube 视频。 {% youtube video_id %} Vimeo在文章中插入 Vimeo 视频。 {% vimeo video_id %} 引用文章引用其它文章的链接。 {% post_path slug %} {% post_link slug [title] %} 引用资源引用文章的资源。 {% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %} Raw如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。 {% raw %} content {% endraw %} 资源文件夹资源（Asset）代表 source 文件夹中除了文章以外的所有文件。访问它们的最简单方法是使用相对路径的常规 markdown 语法![](/xxx/xxx.jpg)。但该方法不能在首页上正确工作。 文章资源文件夹如果想单独组织和管理各个文章的资源，可以将_config.yml的post_asset_folder的选项设为true。Hexo会在每次通过hexo new [layout] &lt;title&gt;命令创建新文章时自动创建一个与 markdown 文件一样名字的文件夹，可以将所有与该文章有关的资源放到这个关联文件夹中，就可以通过相对路径来引用它们。方法参考引用资源。 例如： {% asset_img example.jpg This is an example image. %} 数据文件如果您需要在主题中使用某些资源，而这些资料并不会在文章内，并且是需要重复使用的，那么可以考虑 数据文件 功能。此功能会载入 source/_data 内的 YAML 或 JSON 文件。 举例来说，在 source/_data 文件夹中新建 menu.yml 文件： Home: / Gallery: /gallery/ Archives: /archives/ 就可以在模板中使用： &lt;% for (var link in site.data.menu) { %&gt; &lt;% &lt;a href=&quot;&lt;%= site.data.menu[link] %&gt;&quot;&gt; &lt;%= link %&gt; &lt;/a&gt; %&gt; &lt;% } %&gt; 部署在开始之前，您必须先在 _config.yml中修改参数，一个正确的部署配置中至少要有 type 参数，例如： deploy: type: git 您可以同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 deploy: - type: git repo: - type: heroku repo: 部署到 Git安装 hexo-deployer-git。 $ npm install hexo-deployer-git --save 修改配置： deploy: type:git repo: &lt;repository url&gt; branch: [branch] message: [message] 参数 描述 repo 库（Repository）地址。 branch 分支名称。 message 自定义提交信息。 其它部署类型请参考此处","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.zhiyuanep.net/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.zhiyuanep.net/tags/Hexo/"},{"name":"使用教程","slug":"使用教程","permalink":"http://blog.zhiyuanep.net/tags/使用教程/"}]},{"title":"新的开始","slug":"新的开始","date":"2017-03-27T11:14:38.000Z","updated":"2017-03-27T11:34:30.749Z","comments":true,"path":"2017/03/27/新的开始/","link":"","permalink":"http://blog.zhiyuanep.net/2017/03/27/新的开始/","excerpt":"","text":"这是一个新的开始。","categories":[],"tags":[]}]}